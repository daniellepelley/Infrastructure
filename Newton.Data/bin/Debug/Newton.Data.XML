<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Newton.Data</name>
    </assembly>
    <members>
        <member name="T:Newton.Data.IRepositoryFactory">
            <summary>
            A factory responcible for creating an instance of a repository
            </summary>
        </member>
        <member name="M:Newton.Data.IRepositoryFactory.Create``1">
            <summary>
            Creates an IRepository for type T
            </summary>
        </member>
        <member name="T:Newton.Data.IRepository`1">
            <summary>
            An interface representing a repository
            </summary>
        </member>
        <member name="T:Newton.Data.IReadOnlyRepository`1">
            <summary>
            An interface representing a repository
            </summary>
        </member>
        <member name="P:Newton.Data.IReadOnlyRepository`1.DataContext">
            <summary>
            The data context that interacts with the data source
            </summary>
        </member>
        <member name="P:Newton.Data.IReadOnlyRepository`1.Items">
            <summary>
            The collection of items of type T in the base data
            </summary>
        </member>
        <member name="M:Newton.Data.IRepository`1.Save(`0)">
            <summary>
            Saves the entity to the base data
            </summary>
        </member>
        <member name="M:Newton.Data.IRepository`1.Delete(`0)">
            <summary>
            Deletes the entity from the base data
            </summary>
        </member>
        <member name="M:Newton.Data.IRepository`1.Create(`0)">
            <summary>
            Creates a new entity of type T in the base data
            </summary>
        </member>
        <member name="P:Newton.Data.IRepository`1.DataContext">
            <summary>
            The data context that interacts with the data source
            </summary>
        </member>
        <member name="P:Newton.Data.IRepository`1.Items">
            <summary>
            The collection of items of type T in the base data
            </summary>
        </member>
        <member name="T:Newton.Data.MultiRepositoryFactory">
            <summary>
            A repository factories that can contain inner repository factories
            </summary>
        </member>
        <member name="M:Newton.Data.MultiRepositoryFactory.Create``1">
            <summary>
            Creates an IRepository for type T
            </summary>
        </member>
        <member name="P:Newton.Data.MultiRepositoryFactory.RepositoryFactories">
            <summary>
            Collection of repository factories
            </summary>
        </member>
        <member name="T:Newton.Data.SoftDeleteRepository`1">
            <summary>
            A decorator around a repository that forces soft delete of records
            </summary>
        </member>
        <member name="M:Newton.Data.SoftDeleteRepository`1.#ctor(Newton.Data.IRepository{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            A decorator around a repository that makes a security check before each transaction
            </summary>
        </member>
        <member name="M:Newton.Data.SoftDeleteRepository`1.Save(`0)">
            <summary>
            Saves the entity to the base data
            </summary>
        </member>
        <member name="M:Newton.Data.SoftDeleteRepository`1.Delete(`0)">
            <summary>
            Deletes the entity from the base data
            </summary>
        </member>
        <member name="M:Newton.Data.SoftDeleteRepository`1.Create(`0)">
            <summary>
            Creates a new entity of type T in the base data
            </summary>
        </member>
        <member name="P:Newton.Data.SoftDeleteRepository`1.DataContext">
            <summary>
            The data context that interacts with the data source
            </summary>
        </member>
        <member name="P:Newton.Data.SoftDeleteRepository`1.Items">
            <summary>
            The collection of items of type T in the base data
            </summary>
        </member>
        <member name="T:Newton.Data.RepositoryDecoratorBase`1">
            <summary>
            A decorator around a repository
            </summary>
        </member>
        <member name="M:Newton.Data.RepositoryDecoratorBase`1.#ctor(Newton.Data.IRepository{`0})">
            <summary>
            A decorator around a repository
            </summary>
        </member>
        <member name="M:Newton.Data.RepositoryDecoratorBase`1.Save(`0)">
            <summary>
            Saves the entity to the base data
            </summary>
        </member>
        <member name="M:Newton.Data.RepositoryDecoratorBase`1.Delete(`0)">
            <summary>
            Deletes the entity from the base data
            </summary>
        </member>
        <member name="M:Newton.Data.RepositoryDecoratorBase`1.Create(`0)">
            <summary>
            Creates a new entity of type T in the base data
            </summary>
        </member>
        <member name="P:Newton.Data.RepositoryDecoratorBase`1.DataContext">
            <summary>
            The data context that interacts with the data source
            </summary>
        </member>
        <member name="P:Newton.Data.RepositoryDecoratorBase`1.Items">
            <summary>
            The collection of items of type T in the base data
            </summary>
        </member>
        <member name="T:Newton.Data.SlowRepository`1">
            <summary>
            A decorator around a repository that makes it slow for testing purposes
            </summary>
        </member>
        <member name="M:Newton.Data.SlowRepository`1.#ctor(Newton.Data.IRepository{`0},System.TimeSpan)">
            <summary>
            A decorator around a repository that makes it slow for testing purposes
            </summary>
        </member>
        <member name="M:Newton.Data.SlowRepository`1.Save(`0)">
            <summary>
            Saves the entity to the base data
            </summary>
        </member>
        <member name="M:Newton.Data.SlowRepository`1.Delete(`0)">
            <summary>
            Deletes the entity from the base data
            </summary>
        </member>
        <member name="M:Newton.Data.SlowRepository`1.Create(`0)">
            <summary>
            Creates a new entity of type T in the base data
            </summary>
        </member>
        <member name="P:Newton.Data.SlowRepository`1.Items">
            <summary>
            The collection of items of type T in the base data
            </summary>
        </member>
        <member name="T:Newton.Data.ValidationRepository`1">
            <summary>
            A decorator around a repository that makes validates entities before updating them
            </summary>
        </member>
        <member name="M:Newton.Data.ValidationRepository`1.#ctor(Newton.Data.IRepository{`0},Newton.Validation.IEntityRuleProvider{`0})">
            <summary>
            A decorator around a repository that makes a security check before each transaction
            </summary>
        </member>
        <member name="M:Newton.Data.ValidationRepository`1.Save(`0)">
            <summary>
            Saves the entity to the base data
            </summary>
        </member>
        <member name="M:Newton.Data.ValidationRepository`1.Delete(`0)">
            <summary>
            Deletes the entity from the base data
            </summary>
        </member>
        <member name="M:Newton.Data.ValidationRepository`1.Create(`0)">
            <summary>
            Creates a new entity of type T in the base data
            </summary>
        </member>
        <member name="P:Newton.Data.ValidationRepository`1.DataContext">
            <summary>
            The data context that interacts with the data source
            </summary>
        </member>
        <member name="P:Newton.Data.ValidationRepository`1.Items">
            <summary>
            The collection of items of type T in the base data
            </summary>
        </member>
        <member name="T:Newton.Data.IdentityProvider`1">
            <summary>
            A class that provide the next Id from a sequence of existing entities
            </summary>
        </member>
        <member name="M:Newton.Data.IdentityProvider`1.#ctor">
            <summary>
            A class that provide the next Id from a sequence of existing entities
            </summary>
        </member>
        <member name="M:Newton.Data.IdentityProvider`1.GetNextIdentity(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Gets the next available identity 
            </summary>
        </member>
        <member name="P:Newton.Data.IdentityProvider`1.GetIdFunc">
            <summary>
            A function that gets an int Id from an entity of type T
            </summary>
        </member>
        <member name="P:Newton.Data.IdentityProvider`1.SetIdFunc">
            <summary>
            A function that sets an int Id on an entity of type T
            </summary>
        </member>
        <member name="T:Newton.Data.IIdentitySetter`1">
            <summary>
            Sets the identity on an entity
            </summary>
        </member>
        <member name="M:Newton.Data.IIdentitySetter`1.SetId(`0)">
            <summary>
            Sets the Id on an entity
            </summary>
        </member>
        <member name="T:Newton.Data.IdentitySetter`1">
            <summary>
            Sets the identity on an entity
            </summary>
        </member>
        <member name="M:Newton.Data.IdentitySetter`1.#ctor(System.Int32,System.Action{`0,System.Int32})">
            <summary>
            Sets the identity on an entity
            </summary>
        </member>
        <member name="M:Newton.Data.IdentitySetter`1.SetId(`0)">
            <summary>
            Sets the Id on the passed entity
            </summary>
        </member>
        <member name="P:Newton.Data.IdentitySetter`1.Seed">
            <summary>
            The current highest Id
            </summary>
        </member>
        <member name="P:Newton.Data.IdentitySetter`1.SetIdFunc">
            <summary>
            A function that sets an int Id on an entity of type T
            </summary>
        </member>
        <member name="M:Newton.Data.IAsyncRepository`1.SaveAsync(`0,System.Action{`0})">
            <summary>
            Saves the entity to the base data
            </summary>
        </member>
        <member name="M:Newton.Data.IAsyncRepository`1.DeleteAsync(`0,System.Action{`0})">
            <summary>
            Deletes the entity from the base data
            </summary>
        </member>
        <member name="M:Newton.Data.IAsyncRepository`1.CreateAsync(`0,System.Action{`0})">
            <summary>
            Creates a new entity of type T in the base data
            </summary>
        </member>
        <member name="P:Newton.Data.IAsyncRepository`1.DataContext">
            <summary>
            The data context that interacts with the data source
            </summary>
        </member>
        <member name="P:Newton.Data.IAsyncRepository`1.Items">
            <summary>
            The collection of items of type T in the base data
            </summary>
        </member>
        <member name="T:Newton.Data.ParametersQuery">
            <summary>
            A query which consists of a collection of parameters
            </summary>
        </member>
        <member name="M:Newton.Data.ParametersQuery.#ctor">
            <summary>
            A query which is added to a uri
            </summary>
        </member>
        <member name="M:Newton.Data.ParametersQuery.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            A query which is added to a uri
            </summary>
        </member>
        <member name="P:Newton.Data.ParametersQuery.Parameters">
            <summary>
            The query string to be added to a uri
            </summary>
        </member>
        <member name="T:Newton.Data.EntityFrameworkChangeLogger">
            <summary>
            Entity Framework change logger
            </summary>
        </member>
        <member name="T:Newton.Data.IEntityChangeLogger">
            <summary>
            Creates a log of a change on an entity
            </summary>
        </member>
        <member name="M:Newton.Data.IEntityChangeLogger.CreateChangeLog(System.Object)">
            <summary>
            Creates a log of all the changes on the passed entity
            </summary>
        </member>
        <member name="M:Newton.Data.IEntityChangeLogger.CreateChangeLog``1(``0)">
            <summary>
            Creates a log of all the changes on the passed entity
            </summary>
        </member>
        <member name="P:Newton.Data.IEntityChangeLogger.DataContext">
            <summary>
            The data context that contains the entities to be logged
            </summary>
        </member>
        <member name="M:Newton.Data.EntityFrameworkChangeLogger.#ctor(System.Data.Objects.ObjectContext)">
            <summary>
            Entity Framework change logger
            </summary>
        </member>
        <member name="M:Newton.Data.EntityFrameworkChangeLogger.CreateChangeLog``1(``0)">
            <summary>
            Audits Changes to a Specific Entity
            </summary>
            <typeparam name="T">The Data Entity Type</typeparam>
            <param name="modifiedEntity">The Entity To Audit</param>
        </member>
        <member name="M:Newton.Data.EntityFrameworkChangeLogger.CreateChangeLog(System.Object)">
            <summary>
            Audits Changes to a Specific Entity
            </summary>
            <param name="modifiedEntity">The Entity To Audit</param>
        </member>
        <member name="M:Newton.Data.EntityFrameworkChangeLogger.CreateChangeLog``1(``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Audits Changes to a Specific Entity
            </summary>
            <typeparam name="T">The Data Entity Type</typeparam>
            <param name="modifiedEntity">The Entity To Audit</param>
        </member>
        <member name="M:Newton.Data.EntityFrameworkChangeLogger.CreateChangeLog``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Audits Changes to a Specific Entity
            </summary>
            <typeparam name="T">The Data Entity Type</typeparam>
            <param name="modifiedEntity">The Entity To Audit</param>
        </member>
        <member name="P:Newton.Data.EntityFrameworkChangeLogger.DataContext">
            <summary>
            The contained data context
            </summary>
        </member>
        <member name="T:Newton.Data.EntityChangeLogItem">
            <summary>
            Class representing a change to a property on an entity
            </summary>
        </member>
        <member name="T:Newton.Data.IEntityChangeLogItem">
            <summary>
            Interface representing a change to a property on an entity
            </summary>
        </member>
        <member name="P:Newton.Data.IEntityChangeLogItem.PropertyName">
            <summary>
            The name of the property
            </summary>
        </member>
        <member name="P:Newton.Data.IEntityChangeLogItem.OriginalValue">
            <summary>
            The original value of the property
            </summary>
        </member>
        <member name="P:Newton.Data.IEntityChangeLogItem.CurrentValue">
            <summary>
            The current value of the property
            </summary>
        </member>
        <member name="P:Newton.Data.EntityChangeLogItem.PropertyName">
            <summary>
            The name of the property
            </summary>
        </member>
        <member name="P:Newton.Data.EntityChangeLogItem.CurrentValue">
            <summary>
            The current value of the property
            </summary>
        </member>
        <member name="P:Newton.Data.EntityChangeLogItem.OriginalValue">
            <summary>
            The original value of the property
            </summary>
        </member>
        <member name="T:Newton.Data.EntityFrameworkLoggerFactory">
            <summary>
            A factory which produces Entity Framework repositories
            </summary>
        </member>
        <member name="T:Newton.Data.ILoggerFactory">
            <summary>
            A factory which creates a logger
            </summary>
        </member>
        <member name="M:Newton.Data.ILoggerFactory.Create``1">
            <summary>
            Creates a logger from a type
            </summary>
        </member>
        <member name="M:Newton.Data.ILoggerFactory.Create(System.String)">
            <summary>
            Creates a generic logger
            </summary>
        </member>
        <member name="T:Newton.Data.LoggerFactory">
            <summary>
            A factory which produces Entity Framework repositories
            </summary>
        </member>
        <member name="T:Newton.Data.LogStructureItem`1">
            <summary>
            Class representing a custom item on the log
            </summary>
        </member>
        <member name="M:Newton.Data.LogStructureItem`1.#ctor(System.String,System.Func{`0,System.String})">
            <summary>
            Class representing a custom item on the log
            </summary>
        </member>
        <member name="P:Newton.Data.LogStructureItem`1.Name">
            <summary>
            The name of the field
            </summary>
        </member>
        <member name="P:Newton.Data.LogStructureItem`1.ValueSelecter">
            <summary>
            A value selector to get the value of the field
            </summary>
        </member>
        <member name="T:Newton.Data.LogStructure`1">
            <summary>
            Class representing a custom item on the log
            </summary>
        </member>
        <member name="M:Newton.Data.LogStructure`1.#ctor">
            <summary>
            Class representing a custom item on the log
            </summary>
        </member>
        <member name="M:Newton.Data.LogStructure`1.BuildMessage(`0)">
            <summary>
            Builds the message from the source object
            </summary>
        </member>
        <member name="P:Newton.Data.LogStructure`1.Items">
            <summary>
            Collection of items that make up the free text part of a log
            </summary>
        </member>
        <member name="P:Newton.Data.LogStructure`1.Format">
            <summary>
            The format of the field name {0} and the value {1}
            </summary>
        </member>
        <member name="T:Newton.Data.StructuredLogger`1">
            <summary>
            Class representing a structure key pair logger
            </summary>
        </member>
        <member name="T:Newton.Data.ILogger`1">
            <summary>
            Interface representing a logger
            </summary>
        </member>
        <member name="M:Newton.Data.ILogger`1.Log(`0)">
            <summary>
            Creates a log for the passed entity
            </summary>
        </member>
        <member name="M:Newton.Data.StructuredLogger`1.#ctor">
            <summary>
            Class representing a structure key pair logger
            </summary>
        </member>
        <member name="M:Newton.Data.StructuredLogger`1.CreateLogStructure">
            <summary>
            Defines the structue of the log entries
            </summary>
        </member>
        <member name="M:Newton.Data.StructuredLogger`1.Log(`0)">
            <summary>
            Logs an exception using an ExceptionContext on an MVC application
            </summary>
        </member>
        <member name="P:Newton.Data.StructuredLogger`1.LogStructure">
            <summary>
            The structure of the data to be added to the log
            </summary>
        </member>
        <member name="T:Newton.Data.XmRepositoryFactory">
            <summary>
            A factory which produces Entity Framework repositories
            </summary>
        </member>
        <member name="M:Newton.Data.XmRepositoryFactory.#ctor(System.String)">
            <summary>
            A factory which produces Entity Framework repositories
            </summary>
        </member>
        <member name="M:Newton.Data.XmRepositoryFactory.Create``1">
            <summary>
            Creates a EntityFrameworkRepository for type T
            </summary>
        </member>
        <member name="P:Newton.Data.XmRepositoryFactory.DirectoryPath">
            <summary>
            The path of the directory to store the Xml files
            </summary>
        </member>
        <member name="P:Newton.Data.XmRepositoryFactory.GetFileNameFuncs">
            <summary>
            Collections of mapping between type and the file name for the XML file
            </summary>
        </member>
        <member name="T:Newton.Data.XmlRESTRepository`1">
            <summary>
            A repository that uses Xml files saved to a directory
            </summary>
            <remarks>
            In development
            </remarks>
        </member>
        <member name="M:Newton.Data.XmlRESTRepository`1.#ctor(System.String,System.String,System.String)">
            <summary>
            A repository that uses Xml files saved to a directory
            </summary>
        </member>
        <member name="M:Newton.Data.XmlRESTRepository`1.Query(Newton.Data.IQuery)">
            <summary>
            Queries the base data using the passed query
            </summary>
        </member>
        <member name="M:Newton.Data.XmlRESTRepository`1.Save(`0)">
            <summary>
            Saves the entity to the base data
            </summary>
        </member>
        <member name="M:Newton.Data.XmlRESTRepository`1.Delete(`0)">
            <summary>
            Deletes the entity from the base data
            </summary>
        </member>
        <member name="M:Newton.Data.XmlRESTRepository`1.Create(`0)">
            <summary>
            Creates a new entity of type T in the base data
            </summary>
        </member>
        <member name="P:Newton.Data.XmlRESTRepository`1.Serializer">
            <summary>
            A serializer that converts entities to and from Xml
            </summary>
        </member>
        <member name="P:Newton.Data.XmlRESTRepository`1.DataContext">
            <summary>
            The data context that interacts with the data source
            </summary>
        </member>
        <member name="P:Newton.Data.XmlRESTRepository`1.Items">
            <summary>
            The collection of items of type T in the base data
            </summary>
        </member>
        <member name="T:Newton.Data.XmlRepository`1">
            <summary>
            A repository that uses Xml files saved to a directory
            </summary>
        </member>
        <member name="M:Newton.Data.XmlRepository`1.#ctor(System.String,System.Func{`0,System.String})">
            <summary>
            A repository that uses Xml files saved to a directory
            </summary>
        </member>
        <member name="M:Newton.Data.XmlRepository`1.Query(Newton.Data.IQuery)">
            <summary>
            Queries the base data using the passed query
            </summary>
        </member>
        <member name="M:Newton.Data.XmlRepository`1.Save(`0)">
            <summary>
            Saves the entity to the base data
            </summary>
        </member>
        <member name="M:Newton.Data.XmlRepository`1.Delete(`0)">
            <summary>
            Deletes the entity from the base data
            </summary>
        </member>
        <member name="M:Newton.Data.XmlRepository`1.Create(`0)">
            <summary>
            Creates a new entity of type T in the base data
            </summary>
        </member>
        <member name="P:Newton.Data.XmlRepository`1.Serializer">
            <summary>
            A serializer that converts entities to and from Xml
            </summary>
        </member>
        <member name="P:Newton.Data.XmlRepository`1.GetFileName">
            <summary>
            A function to get a filename from an entity
            </summary>
        </member>
        <member name="P:Newton.Data.XmlRepository`1.DataContext">
            <summary>
            The data context that interacts with the data source
            </summary>
        </member>
        <member name="P:Newton.Data.XmlRepository`1.Items">
            <summary>
            The collection of items of type T in the base data
            </summary>
        </member>
        <member name="T:Newton.Data.XmlDataContext">
            <summary>
            A wrapper around a Linq To SQL data context
            </summary>
        </member>
        <member name="T:Newton.Data.IDataContext">
            <summary>
            Interface representing a data context
            </summary>
        </member>
        <member name="M:Newton.Data.IDataContext.AreChanges">
            <summary>
            Checks if there are changes to be persited
            </summary>
        </member>
        <member name="M:Newton.Data.IDataContext.SaveChanges">
            <summary>
            Saves the changes to the data source
            </summary>
        </member>
        <member name="M:Newton.Data.XmlDataContext.#ctor(System.String)">
            <summary>
            A wrapper around a Linq To SQL data context
            </summary>
        </member>
        <member name="M:Newton.Data.XmlDataContext.AreChanges">
            <summary>
            Whether there are changes ready to be persisted to the data source
            </summary>
        </member>
        <member name="M:Newton.Data.XmlDataContext.SaveChanges">
            <summary>
            Saves the changes to the data source
            </summary>
        </member>
        <member name="P:Newton.Data.XmlDataContext.DirectoryPath">
            <summary>
            The path of the directory to store the Xml files
            </summary>
        </member>
        <member name="T:Newton.Data.EntityFrameworkLoggableRepositoryFactory">
            <summary>
            A factory that creates a decorator around a repository that instantly persists on Save or Delete
            </summary>
        </member>
        <member name="M:Newton.Data.EntityFrameworkLoggableRepositoryFactory.#ctor(Newton.Data.EntityFrameworkRepositoryFactory)">
            <summary>
            A factory that creates a decorator around a repository that instantly persists on Save or Delete
            </summary>
        </member>
        <member name="M:Newton.Data.EntityFrameworkLoggableRepositoryFactory.Create``1">
            <summary>
            Creates a repository that instantly persists on Save or Delete
            </summary>
        </member>
        <member name="T:Newton.Data.LoggableRepositoryFactory">
            <summary>
            A factory that creates a decorator around a repository that logs changes
            </summary>
        </member>
        <member name="M:Newton.Data.LoggableRepositoryFactory.#ctor(Newton.Data.IRepositoryFactory,Newton.Data.ILoggerFactory)">
            <summary>
            A factory that creates a decorator around a repository that logs changes
            </summary>
        </member>
        <member name="M:Newton.Data.LoggableRepositoryFactory.Create``1">
            <summary>
            Creates a repository that logs changes
            </summary>
        </member>
        <member name="T:Newton.Data.EntityFrameworkLoggableRepository`1">
            <summary>
            A decorator around a repository which injects logging
            </summary>
        </member>
        <member name="M:Newton.Data.EntityFrameworkLoggableRepository`1.#ctor(Newton.Data.EntityFrameworkRepository{`0})">
            <summary>
            A decorator around a repository which injects logging
            </summary>
        </member>
        <member name="M:Newton.Data.EntityFrameworkLoggableRepository`1.Query(Newton.Data.IQuery)">
            <summary>
            Queries the base data using the passed query
            </summary>
        </member>
        <member name="M:Newton.Data.EntityFrameworkLoggableRepository`1.Save(`0)">
            <summary>
            Saves the entity to the base data
            </summary>
        </member>
        <member name="M:Newton.Data.EntityFrameworkLoggableRepository`1.Delete(`0)">
            <summary>
            Deletes the entity from the base data
            </summary>
        </member>
        <member name="M:Newton.Data.EntityFrameworkLoggableRepository`1.Create(`0)">
            <summary>
            Creates a new entity of type T in the base data
            </summary>
        </member>
        <member name="P:Newton.Data.EntityFrameworkLoggableRepository`1.DataContext">
            <summary>
            The data context that interacts with the data source
            </summary>
        </member>
        <member name="P:Newton.Data.EntityFrameworkLoggableRepository`1.Items">
            <summary>
            The collection of items of type T in the base data
            </summary>
        </member>
        <member name="T:Newton.Data.SecureRepository`1">
            <summary>
            A decorator around a repository that makes a security check before each transaction
            </summary>
        </member>
        <member name="M:Newton.Data.SecureRepository`1.#ctor(Newton.Data.IRepository{`0},Newton.Data.IDataSecurityProvider)">
            <summary>
            A decorator around a repository that makes a security check before each transaction
            </summary>
        </member>
        <member name="M:Newton.Data.SecureRepository`1.Save(`0)">
            <summary>
            Saves the entity to the base data
            </summary>
        </member>
        <member name="M:Newton.Data.SecureRepository`1.Delete(`0)">
            <summary>
            Deletes the entity from the base data
            </summary>
        </member>
        <member name="M:Newton.Data.SecureRepository`1.Create(`0)">
            <summary>
            Creates a new entity of type T in the base data
            </summary>
        </member>
        <member name="P:Newton.Data.SecureRepository`1.DataContext">
            <summary>
            The data context that interacts with the data source
            </summary>
        </member>
        <member name="P:Newton.Data.SecureRepository`1.Items">
            <summary>
            The collection of items of type T in the base data
            </summary>
        </member>
        <member name="T:Newton.Data.UriQuery">
            <summary>
            A query which is added to a uri
            </summary>
        </member>
        <member name="M:Newton.Data.UriQuery.#ctor(System.String)">
            <summary>
            A query which is added to a uri
            </summary>
        </member>
        <member name="P:Newton.Data.UriQuery.UriQueryText">
            <summary>
            The query string to be added to a uri
            </summary>
        </member>
        <member name="T:Newton.Data.IXmlSerializer`1">
            <summary>
            Interface responcible for serializing objects to and from Xml
            </summary>
        </member>
        <member name="M:Newton.Data.IXmlSerializer`1.SerializeObject(`0)">
            <summary>
            Converts the passed object into Xml
            </summary>
        </member>
        <member name="M:Newton.Data.IXmlSerializer`1.DeSerializeObject(System.String)">
            <summary>
            Converts the passed Xml into an object of type T
            </summary>
        </member>
        <member name="P:Newton.Data.IXmlSerializer`1.ExtraTypes">
            <summary>
            Collection of extra types that the serializer needs to be aware of
            </summary>
        </member>
        <member name="T:Newton.Data.XmlSerializer`1">
            <summary>
            Class responcible for serializing objects to and from Xml
            </summary>
        </member>
        <member name="M:Newton.Data.XmlSerializer`1.#ctor">
            <summary>
            Class responcible for serializing objects to and from Xml
            </summary>
        </member>
        <member name="M:Newton.Data.XmlSerializer`1.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Class responcible for serializing objects to and from Xml
            </summary>
        </member>
        <member name="M:Newton.Data.XmlSerializer`1.SerializeObject(`0)">
            <summary>
            Converts the passed object into Xml
            </summary>
        </member>
        <member name="M:Newton.Data.XmlSerializer`1.DeSerializeObject(System.String)">
            <summary>
            Converts the passed Xml into an object of type T
            </summary>
        </member>
        <member name="P:Newton.Data.XmlSerializer`1.ExtraTypes">
            <summary>
            Collection of extra types that the serializer needs to be aware of
            </summary>
        </member>
        <member name="T:Newton.Data.TypeLimiter">
            <summary>
            Limits by a set list of types
            </summary>
        </member>
        <member name="M:Newton.Data.TypeLimiter.CheckType(System.Object)">
            <summary>
            Checks if the type is in the set listy
            </summary>
        </member>
        <member name="M:Newton.Data.TypeLimiter.CheckType``1">
            <summary>
            Checks if the type is in the set listy
            </summary>
        </member>
        <member name="M:Newton.Data.TypeLimiter.CheckType(System.Type)">
            <summary>
            Checks if the type is in the set listy
            </summary>
        </member>
        <member name="P:Newton.Data.TypeLimiter.Types">
            <summary>
            List of types
            </summary>
        </member>
        <member name="T:Newton.Validation.ValidationExtensions">
            <summary>
            Entension methods for Newton.Validation
            </summary>
        </member>
        <member name="M:Newton.Validation.ValidationExtensions.IsValid``1(Newton.Validation.IEntityRuleProvider{``0},``0)">
            <summary>
            Return whether or not the entity is valid
            </summary>
        </member>
        <member name="T:Newton.Validation.IsNotEqualToRule`1">
            <summary>
            A rule which dictates that a value cannot be equal to a collection of other values.
            </summary>
        </member>
        <member name="T:Newton.Validation.FieldRule`1">
            <summary>
            Class representing a single validation rule associated with a field.
            </summary>
        </member>
        <member name="T:Newton.Validation.Rule`1">
            <summary>
            Base class representing a single rule.
            </summary>
        </member>
        <member name="M:Newton.Validation.Rule`1.#ctor">
            <summary>
            Base class representing a single rule.
            </summary>
        </member>
        <member name="M:Newton.Validation.Rule`1.#ctor(System.Func{`0,System.String})">
            <summary>
            Base class representing a single rule.
            </summary>
        </member>
        <member name="M:Newton.Validation.Rule`1.#ctor(System.Func{`0,System.String},System.Func{`0,`0})">
            <summary>
            Base class representing a single rule.
            </summary>
        </member>
        <member name="M:Newton.Validation.Rule`1.LogicMethod(`0)">
            <summary>
            Checks if the rule has been broken.
            </summary>
        </member>
        <member name="P:Newton.Validation.Rule`1.Logic">
            <summary>
            The logical test which determines if the conditions are met.
            </summary>
        </member>
        <member name="T:Newton.Validation.IRule`1">
            <summary>
            Interface representing an item that performs a validation check.
            </summary>
        </member>
        <member name="T:Newton.Validation.IRule">
            <summary>
            Interface representing an item that performs a validation check.
            </summary>
        </member>
        <member name="M:Newton.Validation.FieldRule`1.Check(`0)">
            <summary>
            Checks the value of the field against the rule and returns a result.
            </summary>
        </member>
        <member name="M:Newton.Validation.FieldRule`1.CheckValid(`0)">
            <summary>
            Checks the value of the field against the rule and returns a result.
            </summary>
        </member>
        <member name="M:Newton.Validation.FieldRule`1.#ctor">
            <summary>
            Class representing a single validation rule associated with a field.
            </summary>
        </member>
        <member name="M:Newton.Validation.FieldRule`1.#ctor(System.Func{`0,System.String})">
            <summary>
            Class representing a single validation rule associated with a field.
            </summary>
        </member>
        <member name="M:Newton.Validation.FieldRule`1.#ctor(System.Func{`0,System.String},System.String)">
            <summary>
            Class representing a single validation rule associated with a field.
            </summary>
        </member>
        <member name="M:Newton.Validation.FieldRule`1.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns
            an integer that indicates whether the current instance precedes, follows,
            or occurs in the same position in the sort order as the other object.
            </summary>
        </member>
        <member name="M:Newton.Validation.IsNotEqualToRule`1.#ctor">
            <summary>
            A rule which dictates that a value cannot be null.
            </summary>
        </member>
        <member name="M:Newton.Validation.IsNotEqualToRule`1.LogicMethod(`0)">
            <summary>
            Checks if the rule has been broken.
            </summary>
        </member>
        <member name="P:Newton.Validation.IsNotEqualToRule`1.OtherValues">
            <summary>
            The list of other values
            </summary>
        </member>
        <member name="T:Newton.Validation.IsNotEqualToRule">
            <summary>
            A rule which dictates that a value cannot be equal to a collection of other values.
            </summary>
        </member>
        <member name="M:Newton.Validation.IsNotEqualToRule.#ctor">
            <summary>
            A rule which dictates that a value cannot be null.
            </summary>
        </member>
        <member name="M:Newton.Validation.IsNotEqualToRule.LogicMethod(System.String)">
            <summary>
            Checks if the rule has been broken.
            </summary>
        </member>
        <member name="P:Newton.Validation.IsNotEqualToRule.IsCaseSensative">
            <summary>
            Whether the rule is case sensative when comparing the value with the other values
            </summary>
        </member>
        <member name="T:Newton.Validation.LengthRule">
            <summary>
            A rule which sets a length for a string.
            </summary>
            <remarks>
            Will still pass if the string is empty.
            </remarks>
        </member>
        <member name="T:Newton.Validation.MaximumLengthRule">
            <summary>
            A rule which sets a maximum length for a string.
            </summary>
        </member>
        <member name="M:Newton.Validation.MaximumLengthRule.#ctor">
            <summary>
            A rule which sets a maximum length for a string.
            </summary>
        </member>
        <member name="M:Newton.Validation.MaximumLengthRule.#ctor(System.Int32)">
            <summary>
            A rule which sets a maximum length for a string.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Newton.Validation.MaximumLengthRule.CompareTo(System.Object)" -->
        <member name="M:Newton.Validation.MaximumLengthRule.Enforce(System.String)">
            <summary>
            Enforces the rule
            </summary>
        </member>
        <member name="P:Newton.Validation.MaximumLengthRule.Length">
            <summary>
            Maximum length for the string.
            </summary>
        </member>
        <member name="M:Newton.Validation.LengthRule.#ctor">
            <summary>
            A rule which sets a length for a string.
            </summary>
        </member>
        <member name="M:Newton.Validation.LengthRule.#ctor(System.Int32)">
            <summary>
            A rule which sets a length for a string.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Newton.Validation.LengthRule.CompareTo(System.Object)" -->
        <member name="T:Newton.Validation.CasingRule">
            <summary>
            A rule which sets the casing type for a string.
            </summary>
        </member>
        <member name="M:Newton.Validation.CasingRule.#ctor">
            <summary>
            A rule which sets a minimum length for a string.
            </summary>
        </member>
        <member name="M:Newton.Validation.CasingRule.#ctor(Newton.Validation.CasingType)">
            <summary>
            A rule which sets a minimum length for a string.
            </summary>
        </member>
        <member name="M:Newton.Validation.CasingRule.Enforce(System.String)">
            <summary>
            Changes the casing as required
            </summary>
        </member>
        <member name="P:Newton.Validation.CasingRule.CasingType">
            <summary>
            Minimum length for the string.
            </summary>
        </member>
        <member name="T:Newton.Validation.RegexRule">
            <summary>
            A rule matching the field value with a single regex.
            </summary>
        </member>
        <member name="M:Newton.Validation.RegexRule.#ctor">
            <summary>
            Field rule matching the field value with a collection of regexes.
            </summary>
        </member>
        <member name="M:Newton.Validation.RegexRule.#ctor(System.String)">
            <summary>
            Field rule matching the field value with a collection of regexes.
            </summary>
        </member>
        <member name="M:Newton.Validation.RegexRule.#ctor(System.String,System.String)">
            <summary>
            Field rule matching the field value with a collection of regexes.
            </summary>
        </member>
        <member name="P:Newton.Validation.RegexRule.Regex">
            <summary>
            The regex for this item.
            </summary>
        </member>
        <member name="T:Newton.Validation.ContainsRule">
            <summary>
            A rule which sets what the string should contain.
            </summary>
        </member>
        <member name="M:Newton.Validation.ContainsRule.#ctor">
            <summary>
            A rule which sets what the string should contain.
            </summary>
        </member>
        <member name="M:Newton.Validation.ContainsRule.#ctor(System.String)">
            <summary>
            A rule which sets what the string should contain.
            </summary>
        </member>
        <member name="P:Newton.Validation.ContainsRule.ContainsString">
            <summary>
            The string the value must contain.
            </summary>
        </member>
        <member name="T:Newton.Validation.NoSpacesRule">
            <summary>
            A rule which doesn't allow spaces in a string.
            </summary>
        </member>
        <member name="M:Newton.Validation.NoSpacesRule.Enforce(System.String)">
            <summary>
            Removes all spaces from the string
            </summary>
        </member>
        <member name="T:Newton.Validation.MinimumLengthRule">
            <summary>
            A rule which sets a minimum length for a string.
            </summary>
        </member>
        <member name="M:Newton.Validation.MinimumLengthRule.#ctor">
            <summary>
            A rule which sets a minimum length for a string.
            </summary>
        </member>
        <member name="M:Newton.Validation.MinimumLengthRule.#ctor(System.Int32)">
            <summary>
            A rule which sets a minimum length for a string.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Newton.Validation.MinimumLengthRule.CompareTo(System.Object)" -->
        <member name="P:Newton.Validation.MinimumLengthRule.Length">
            <summary>
            Minimum length for the string.
            </summary>
        </member>
        <member name="T:Newton.Validation.PastRule">
            <summary>
            A rule which states the date must be in the past.
            </summary>
        </member>
        <member name="M:Newton.Validation.PastRule.LogicMethod(System.Nullable{System.DateTime})">
            <summary>
            A rule which states the date must be in the past.
            </summary>
        </member>
        <member name="T:Newton.Validation.MaximumDateRule">
            <summary>
            A rule which sets the maximum valid date.
            </summary>
        </member>
        <member name="M:Newton.Validation.MaximumDateRule.#ctor">
            <summary>
            A rule which sets the maximum valid date.
            </summary>
        </member>
        <member name="M:Newton.Validation.MaximumDateRule.#ctor(System.DateTime)">
            <summary>
            A rule which sets the maximum valid date.
            </summary>
        </member>
        <member name="M:Newton.Validation.MaximumDateRule.LogicMethod(System.Nullable{System.DateTime})">
            <summary>
            The logic behind the rule.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Newton.Validation.MaximumDateRule.CompareTo(System.Object)" -->
        <member name="P:Newton.Validation.MaximumDateRule.MaxDate">
            <summary>
            Maximum date for the rule.
            </summary>
        </member>
        <member name="T:Newton.Validation.TimeUnit">
            <summary>
            A unit of time
            </summary>
        </member>
        <member name="T:Newton.Validation.FutureRule">
            <summary>
            A rule which states the date must be in the future.
            </summary>
        </member>
        <member name="M:Newton.Validation.FutureRule.LogicMethod(System.Nullable{System.DateTime})">
            <summary>
            A rule which states the date must be in the future.
            </summary>
        </member>
        <member name="P:Newton.Validation.FutureRule.TimeUnit">
            <summary>
            Unit of time counting as the cut off for a future date
            </summary>
        </member>
        <member name="P:Newton.Validation.FutureRule.IncludeCurrent">
            <summary>
            Include the current unit of time as valid
            </summary>
        </member>
        <member name="T:Newton.Validation.MinimumDateRule">
            <summary>
            A rule which sets the minimum valid date.
            </summary>
        </member>
        <member name="M:Newton.Validation.MinimumDateRule.#ctor">
            <summary>
            A rule which sets the minimum valid date.
            </summary>
        </member>
        <member name="M:Newton.Validation.MinimumDateRule.#ctor(System.DateTime)">
            <summary>
            A rule which sets the minimum valid date.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Newton.Validation.MinimumDateRule.CompareTo(System.Object)" -->
        <member name="P:Newton.Validation.MinimumDateRule.MinDate">
            <summary>
            Minimum date for the rule.
            </summary>
        </member>
        <member name="T:Newton.Validation.MaximumRule">
            <summary>
            A rule which sets a maximum for an int.
            </summary>
        </member>
        <member name="M:Newton.Validation.ComparisonRuleBase`1.#ctor(System.Func{`0,`0,System.Boolean},System.String)">
            <summary>
            A rule which compares to objects of type T.
            </summary>
        </member>
        <member name="M:Newton.Validation.ComparisonRuleBase`1.#ctor(`0,System.Func{`0,`0,System.Boolean},System.String)">
            <summary>
            A rule which compares to objects of type T.
            </summary>
        </member>
        <member name="P:Newton.Validation.ComparisonRuleBase`1.ComparisonValue">
            <summary>
            Minimum length for the string.
            </summary>
        </member>
        <member name="M:Newton.Validation.MaximumRule.#ctor">
            <summary>
            A rule which sets a maximum for an int.
            </summary>
        </member>
        <member name="M:Newton.Validation.MaximumRule.#ctor(System.Nullable{System.Int32})">
            <summary>
            A rule which sets a maximum for an int.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Newton.Validation.MaximumRule.CompareTo(System.Object)" -->
        <member name="T:Newton.Validation.MinimumRule">
            <summary>
            A rule which sets a minimum for an int.
            </summary>
        </member>
        <member name="M:Newton.Validation.MinimumRule.#ctor">
            <summary>
            A rule which sets a minimum for an int.
            </summary>
        </member>
        <member name="M:Newton.Validation.MinimumRule.#ctor(System.Nullable{System.Int32})">
            <summary>
            A rule which sets a minimum for an int.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Newton.Validation.MinimumRule.CompareTo(System.Object)" -->
        <member name="T:Newton.Validation.MaximumByteRule">
            <summary>
            A rule which sets a maximum for a byte.
            </summary>
        </member>
        <member name="M:Newton.Validation.MaximumByteRule.#ctor">
            <summary>
            A rule which sets a maximum for a byte.
            </summary>
        </member>
        <member name="M:Newton.Validation.MaximumByteRule.#ctor(System.Nullable{System.Byte})">
            <summary>
            A rule which sets a maximum for a byte.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Newton.Validation.MaximumByteRule.CompareTo(System.Object)" -->
        <member name="T:Newton.Validation.MinimumNullableByteRule`1">
            <summary>
            A rule which sets a minimum for a byte.
            </summary>
        </member>
        <member name="M:Newton.Validation.MinimumNullableByteRule`1.#ctor">
            <summary>
            A rule which sets a minimum for a byte.
            </summary>
        </member>
        <member name="M:Newton.Validation.MinimumNullableByteRule`1.#ctor(System.Byte)">
            <summary>
            A rule which sets a minimum for a byte.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Newton.Validation.MinimumNullableByteRule`1.CompareTo(System.Object)" -->
        <member name="T:Newton.Validation.MinimumByteRule">
            <summary>
            A rule which sets a minimum for a byte.
            </summary>
        </member>
        <member name="M:Newton.Validation.MinimumByteRule.#ctor">
            <summary>
            A rule which sets a minimum for a byte.
            </summary>
        </member>
        <member name="M:Newton.Validation.MinimumByteRule.#ctor(System.Byte)">
            <summary>
            A rule which sets a minimum for a byte.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Newton.Validation.MinimumByteRule.CompareTo(System.Object)" -->
        <member name="T:Newton.Validation.IEntityRuleProviderFactory">
            <summary>
            An interface representing a rule provider for entity of type T
            </summary>
        </member>
        <member name="M:Newton.Validation.IEntityRuleProviderFactory.Create``1">
            <summary>
            Creates a rule provider for type T
            </summary>
        </member>
        <member name="M:Newton.Validation.RuleCollection`1.Check(`0)">
            <summary>
            Checks the value of the field against the rule and returns a result.
            </summary>
        </member>
        <member name="M:Newton.Validation.RuleCollection`1.CheckValid(`0)">
            <summary>
            Checks the value of the field against the rule and returns a result.
            </summary>
        </member>
        <member name="M:Newton.Validation.RuleCollection`1.GetIRules">
            <summary>
            Returns a collection of rules as IRule
            </summary>
            <returns></returns>
        </member>
        <member name="P:Newton.Validation.RuleCollection`1.Rules">
            <summary>
            Collection of rules
            </summary>
        </member>
        <member name="T:Newton.Validation.EqualsRule">
            <summary>
            A rule which sets what the string should equal.
            </summary>
        </member>
        <member name="M:Newton.Validation.EqualsRule.#ctor">
            <summary>
            A rule which sets what the string should equal.
            </summary>
        </member>
        <member name="M:Newton.Validation.EqualsRule.#ctor(System.String)">
            <summary>
            A rule which sets what the string should equal.
            </summary>
        </member>
        <member name="P:Newton.Validation.EqualsRule.EqualString">
            <summary>
            The string the value must contain.
            </summary>
        </member>
        <member name="T:Newton.Validation.IsRequiredRule`1">
            <summary>
            A rule which dictates that a value cannot be null.
            </summary>
        </member>
        <member name="M:Newton.Validation.IsRequiredRule`1.#ctor">
            <summary>
            A rule which dictates that a value cannot be null.
            </summary>
        </member>
        <member name="M:Newton.Validation.IsRequiredRule`1.LogicMethod(`0)">
            <summary>
            Checks if the rule has been broken.
            </summary>
        </member>
        <member name="T:Newton.Data.InstantPersistanceRepository`1">
            <summary>
            A decorator around a repository that instantly resists on Save or Delete
            </summary>
        </member>
        <member name="M:Newton.Data.InstantPersistanceRepository`1.#ctor(Newton.Data.IRepository{`0})">
            <summary>
            A decorator around a repository that instantly resists on Save or Delete
            </summary>
        </member>
        <member name="M:Newton.Data.InstantPersistanceRepository`1.Save(`0)">
            <summary>
            Saves the entity to the base data
            </summary>
        </member>
        <member name="M:Newton.Data.InstantPersistanceRepository`1.Delete(`0)">
            <summary>
            Deletes the entity from the base data
            </summary>
        </member>
        <member name="M:Newton.Data.InstantPersistanceRepository`1.Create(`0)">
            <summary>
            Creates a new entity of type T in the base data
            </summary>
        </member>
        <member name="P:Newton.Data.InstantPersistanceRepository`1.DataContext">
            <summary>
            The data context that interacts with the data source
            </summary>
        </member>
        <member name="P:Newton.Data.InstantPersistanceRepository`1.Items">
            <summary>
            The collection of items of type T in the base data
            </summary>
        </member>
        <member name="T:Newton.Data.LoggableRepository`1">
            <summary>
            A decorator around a repository which injects logging
            </summary>
        </member>
        <member name="M:Newton.Data.LoggableRepository`1.#ctor(Newton.Data.IRepository{`0},Newton.Data.ILogger{`0})">
            <summary>
            A decorator around a repository which injects logging
            </summary>
        </member>
        <member name="M:Newton.Data.LoggableRepository`1.Save(`0)">
            <summary>
            Saves the entity to the base data
            </summary>
        </member>
        <member name="M:Newton.Data.LoggableRepository`1.Delete(`0)">
            <summary>
            Deletes the entity from the base data
            </summary>
        </member>
        <member name="M:Newton.Data.LoggableRepository`1.Create(`0)">
            <summary>
            Creates a new entity of type T in the base data
            </summary>
        </member>
        <member name="T:Newton.Data.SecureRepositoryFactory">
            <summary>
            A factory that creates a decorator around a repository that provides security
            </summary>
        </member>
        <member name="M:Newton.Data.SecureRepositoryFactory.#ctor(Newton.Data.IRepositoryFactory,Newton.Data.IDataSecurityProvider)">
            <summary>
            A factory that creates a decorator around a repository that provides security
            </summary>
        </member>
        <member name="M:Newton.Data.SecureRepositoryFactory.Create``1">
            <summary>
            Creates a repository that provides security
            </summary>
        </member>
        <member name="T:Newton.Data.EntityFrameworkDataContext">
            <summary>
            A wrapper around a Linq To SQL data context
            </summary>
        </member>
        <member name="M:Newton.Data.EntityFrameworkDataContext.#ctor(System.Data.Objects.ObjectContext)">
            <summary>
            A wrapper around a Linq To SQL data context
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Newton.Data.EntityFrameworkDataContext.AreChanges" -->
        <member name="M:Newton.Data.EntityFrameworkDataContext.SaveChanges">
            <summary>
            Saves the changes to the data source
            </summary>
        </member>
        <member name="P:Newton.Data.EntityFrameworkDataContext.ObjectContext">
            <summary>
            The contained ObjectContext used to comunicate with the database
            </summary>
        </member>
        <member name="T:Newton.Data.LinqToSqlDataContext">
            <summary>
            A wrapper around a Linq To SQL data context
            </summary>
        </member>
        <member name="M:Newton.Data.LinqToSqlDataContext.#ctor(System.Data.Linq.DataContext)">
            <summary>
            A wrapper around a Linq To SQL data context
            </summary>
        </member>
        <member name="M:Newton.Data.LinqToSqlDataContext.AreChanges">
            <summary>
            Whether there are changes ready to be persisted to the data source
            </summary>
        </member>
        <member name="M:Newton.Data.LinqToSqlDataContext.SaveChanges">
            <summary>
            Saves the changes to the data source
            </summary>
        </member>
        <member name="P:Newton.Data.LinqToSqlDataContext.DataContext">
            <summary>
            The wrapped Linq To SQL data context
            </summary>
        </member>
        <member name="T:Newton.Data.InstantPersistanceRepositoryFactory">
            <summary>
            A factory that creates a decorator around a repository that instantly persists on Save or Delete
            </summary>
        </member>
        <member name="M:Newton.Data.InstantPersistanceRepositoryFactory.#ctor(Newton.Data.IRepositoryFactory)">
            <summary>
            A factory that creates a decorator around a repository that instantly persists on Save or Delete
            </summary>
        </member>
        <member name="M:Newton.Data.InstantPersistanceRepositoryFactory.Create``1">
            <summary>
            Creates a repository that instantly persists on Save or Delete
            </summary>
        </member>
        <member name="T:Newton.Data.PredicateQuery`1">
            <summary>
            A query containing a predicate based on type T
            </summary>
        </member>
        <member name="P:Newton.Data.PredicateQuery`1.Predicate">
            <summary>
            A method that takes type T and returns a boolean
            </summary>
        </member>
        <member name="T:Newton.Data.EntityFrameworkRepository`1">
            <summary>
            A repository that uses entity framework to comunicate with a database
            </summary>
        </member>
        <member name="M:Newton.Data.EntityFrameworkRepository`1.#ctor(System.Data.Objects.ObjectContext)">
            <summary>
            A repository that uses entity framework to comunicate with a database
            </summary>
        </member>
        <member name="M:Newton.Data.EntityFrameworkRepository`1.#ctor(Newton.Data.EntityFrameworkDataContext)">
            <summary>
            A repository that uses entity framework to comunicate with a database
            </summary>
        </member>
        <member name="M:Newton.Data.EntityFrameworkRepository`1.Query(Newton.Data.IQuery)">
            <summary>
            Queries the base data using the passed query
            </summary>
        </member>
        <member name="M:Newton.Data.EntityFrameworkRepository`1.Save(`0)">
            <summary>
            Saves the entity to the base data
            </summary>
        </member>
        <member name="M:Newton.Data.EntityFrameworkRepository`1.Delete(`0)">
            <summary>
            Deletes the entity from the base data
            </summary>
        </member>
        <member name="M:Newton.Data.EntityFrameworkRepository`1.Create(`0)">
            <summary>
            Creates a new entity of type T in the base data
            </summary>
        </member>
        <member name="P:Newton.Data.EntityFrameworkRepository`1.DataContext">
            <summary>
            The data context that interacts with the data source
            </summary>
        </member>
        <member name="P:Newton.Data.EntityFrameworkRepository`1.Items">
            <summary>
            The collection of items of type T in the base data
            </summary>
        </member>
        <member name="M:Newton.Data.LinqToSQLRepository`1.Query(Newton.Data.IQuery)">
            <summary>
            Queries the base data using the passed query
            </summary>
        </member>
        <member name="M:Newton.Data.LinqToSQLRepository`1.Save(`0)">
            <summary>
            Saves the entity to the base data
            </summary>
        </member>
        <member name="M:Newton.Data.LinqToSQLRepository`1.Delete(`0)">
            <summary>
            Deletes the entity from the base data
            </summary>
        </member>
        <member name="M:Newton.Data.LinqToSQLRepository`1.Create(`0)">
            <summary>
            Creates a new entity of type T in the base data
            </summary>
        </member>
        <member name="T:Newton.Data.ILoggable`1">
            <summary>
            Defines an object that can log changes to itself
            </summary>
        </member>
        <member name="T:Newton.Data.LinqToSQLChangeLogger">
            <summary>
            A logger designed to work with LinqToSQL
            </summary>
        </member>
        <member name="M:Newton.Data.LinqToSQLChangeLogger.#ctor(System.Data.Linq.DataContext)">
            <summary>
            A logger designed to work with LinqToSQL
            </summary>
        </member>
        <member name="M:Newton.Data.LinqToSQLChangeLogger.CreateChangeLog``1(``0)">
            <summary>
            Audits Changes to a Specific Entity
            </summary>
            <typeparam name="TEntity">The Data Entity Type</typeparam>
            <param name="modifiedEntity">The Entity To Audit</param>
        </member>
        <member name="M:Newton.Data.LinqToSQLChangeLogger.CreateChangeLog(System.Object)">
            <summary>
            Audits Changes to a Specific Entity
            </summary>
            <param name="modifiedEntity">The Entity To Audit</param>
        </member>
        <member name="M:Newton.Data.LinqToSQLChangeLogger.CreateChangeLog``1(``0,System.Collections.Generic.Dictionary{System.String,System.Func{``0,System.String}})">
            <summary>
            Audits Changes to a Specific Entity
            </summary>
            <typeparam name="TEntity">The Data Entity Type</typeparam>
            <param name="modifiedEntity">The Entity To Audit</param>
        </member>
        <member name="M:Newton.Data.LinqToSQLChangeLogger.CreateChangeLog``1(``0,System.Collections.Generic.Dictionary{System.String,System.Func{``0,System.String}},System.Boolean)">
            <summary>
            Audits Changes to a Specific Entity
            </summary>
            <typeparam name="TEntity">The Data Entity Type</typeparam>
            <param name="modifiedEntity">The Entity To Audit</param>
        </member>
        <member name="P:Newton.Data.LinqToSQLChangeLogger.DataContext">
            <summary>
            The contained data context
            </summary>
        </member>
        <member name="T:Newton.Data.EntityFrameworkRepositoryFactory">
            <summary>
            A factory which produces Entity Framework repositories
            </summary>
        </member>
        <member name="M:Newton.Data.EntityFrameworkRepositoryFactory.#ctor(System.Data.Objects.ObjectContext)">
            <summary>
            A factory which produces Entity Framework repositories
            </summary>
        </member>
        <member name="M:Newton.Data.EntityFrameworkRepositoryFactory.#ctor(System.String)">
            <summary>
            A factory which produces Entity Framework repositories
            </summary>
        </member>
        <member name="M:Newton.Data.EntityFrameworkRepositoryFactory.Create``1">
            <summary>
            Creates a EntityFrameworkRepository for type T
            </summary>
        </member>
        <member name="P:Newton.Data.EntityFrameworkRepositoryFactory.ObjectContext">
            <summary>
            The contained ObjectContext used to comunicate with the database
            </summary>
        </member>
        <member name="T:Newton.Data.LinqToSQLRepositoryFactory">
            <summary>
            A factory which produces LinqToSQL repositories
            </summary>
        </member>
        <member name="M:Newton.Data.LinqToSQLRepositoryFactory.#ctor(System.Data.Linq.DataContext)">
            <summary>
            A factory which produces LinqToSQL repositories
            </summary>
        </member>
        <member name="M:Newton.Data.LinqToSQLRepositoryFactory.#ctor(Newton.Data.LinqToSqlDataContext)">
            <summary>
            A factory which produces LinqToSQL repositories
            </summary>
        </member>
        <member name="M:Newton.Data.LinqToSQLRepositoryFactory.Create``1">
            <summary>
            Creates a LinqToSQLRepository for type T
            </summary>
        </member>
        <member name="P:Newton.Data.LinqToSQLRepositoryFactory.DataContext">
            <summary>
            The contained DataContext used to comunicate with the database
            </summary>
        </member>
        <member name="T:Newton.Validation.IEntityRuleProvider`1">
            <summary>
            An interface representing a rule provider that works with the Mvc framework
            </summary>
        </member>
        <member name="M:Newton.Validation.IEntityRuleProvider`1.AddRule``1(System.String,Newton.Validation.IRule{``0})">
            <summary>
            Adds a rule to the rule provider
            </summary>
        </member>
        <member name="M:Newton.Validation.IEntityRuleProvider`1.Validate(`0)">
            <summary>
            Validates the entity and returns a dictionary of broken rules
            </summary>
        </member>
        <member name="M:Newton.Validation.IEntityRuleProvider`1.Clean(`0)">
            <summary>
            Cleans the entity and the entity in a cleaned state
            </summary>
        </member>
        <member name="P:Newton.Validation.IEntityRuleProvider`1.FieldRules">
            <summary>
            Rules associated with each field in the entity
            </summary>
        </member>
        <member name="P:Newton.Validation.IEntityRuleProvider`1.EntityRules">
            <summary>
            Rules associated with the whole entity
            </summary>
        </member>
        <member name="T:Newton.Validation.EntityRuleProvider`1">
            <summary>
            An interface representing a rule provider that works with the Mvc framework
            </summary>
        </member>
        <member name="M:Newton.Validation.EntityRuleProvider`1.AddRule``1(System.String,Newton.Validation.IRule{``0})">
            <summary>
            Adds a rule to the rule provider
            </summary>
        </member>
        <member name="M:Newton.Validation.EntityRuleProvider`1.Validate(`0)">
            <summary>
            Validates the model and returns an IDictionary of fieldName to broken rules pairs
            </summary>
        </member>
        <member name="M:Newton.Validation.EntityRuleProvider`1.Clean(`0)">
            <summary>
            Cleans the model using any enforcable rules
            </summary>
            <remarks>
            Required testing
            </remarks>
        </member>
        <member name="P:Newton.Validation.EntityRuleProvider`1.FieldRules">
            <summary>
            Rules associated with each field in the entity
            </summary>
        </member>
        <member name="P:Newton.Validation.EntityRuleProvider`1.EntityRules">
            <summary>
            Rules associated with the whole entity
            </summary>
        </member>
        <member name="T:Newton.Validation.Time24HourRule">
            <summary>
            A rule which states that text must be in the format HH:MM
            </summary>
        </member>
        <member name="M:Newton.Validation.Time24HourRule.#ctor">
            <summary>
            A rule which states that text must be in the format HH:MM
            </summary>
        </member>
    </members>
</doc>
